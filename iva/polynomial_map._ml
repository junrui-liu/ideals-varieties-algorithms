open Base

module type VAR = sig
  type t

  include Base.Comparable.S with type t := t

  val sexp_of_t : t -> Sexp.t
  val t_of_sexp : Sexp.t -> t
  val pp : t Fmt.t
end

(** Monomial *)
module Mono = struct
  module T = struct
    type ('var, 'cmp) t = ('var, int, 'cmp) Map.t
    (** A monomial is a map from variables to positive exponents. *)

    let pp_exponent : int Fmt.t =
      Fmt.using
        (fun n ->
          n
          |> Int.to_string
          |> String.to_list
          |> List.map ~f:(fun c ->
                 let i = Char.to_string c |> Int.of_string in
                 match i with
                 | 0 -> "⁰"
                 | 1 -> "¹"
                 | 2 -> "²"
                 | 3 -> "³"
                 | 4 -> "⁴"
                 | 5 -> "⁵"
                 | 6 -> "⁶"
                 | 7 -> "⁷"
                 | 8 -> "⁸"
                 | 9 -> "⁹"
                 | _ -> assert false)
          |> String.concat)
        Fmt.string

    let pp_var_exp pp_var ppf (var, exp) =
      let open Fmt in
      if exp = 1 then pf ppf "%a" pp_var var
      else pf ppf "%a%a" pp_var var pp_exponent exp

    let pp pp_var : ('var, 'cmp) t Fmt.t =
      let open Fmt in
      using Map.to_alist (hbox @@ list (pp_var_exp pp_var))

    let invariant (m : ('var, 'cmp) t) = Map.for_all m ~f:(fun e -> e > 0)
    let normalize (m : ('var, 'cmp) t) = Map.filter m ~f:(fun e -> e > 0)

    let of_vars comparator (vars : ('var * int) list) =
      normalize (Map.of_alist_exn comparator vars)

    let one comparator : ('var, 'cmp) t = Map.empty comparator

    let mul (m1 : ('var, 'cmp) t) (m2 : ('var, 'cmp) t) : ('var, 'cmp) t =
      Map.merge m1 m2 ~f:(fun ~key:_ -> function
        | `Left x | `Right x -> Some x
        | `Both (x, y) ->
            (* x, y > 0, so x+y > 0 *)
            Some (x + y))

    let deg (m : ('var, 'cmp) t) ~(of_ : 'var) =
      Map.find m of_ |> Option.value ~default:0

    let total_deg (m : ('var, 'cmp) t) =
      Map.data m |> List.sum (module Int) ~f:Fn.id

    let eval (v : 'var -> 'value) ~(one : 'value)
        ~(mul : 'value -> 'value -> 'value) ~(pow : 'var -> Z.t -> 'value)
        (m : ('var, 'cmp) t) : 'value =
      Map.fold m ~init:one ~f:(fun ~key:var ~data:exp acc ->
          mul acc (pow (v var) (Z.of_int exp)))

    let div (m1 : ('var, 'cmp) t) (m2 : ('var, 'cmp) t) : ('var, 'cmp) t option
        =
      let exception Indivisible in
      try
        let m =
          Map.merge m1 m2 ~f:(fun ~key:_ -> function
            | `Left x -> Some x
            | `Right _ -> raise Indivisible
            | `Both (x, y) ->
                let e = x - y in
                if e < 0 then raise Indivisible
                else if e = 0 then None
                else Some e)
        in
        Some m
      with Indivisible -> None

    let vars = Map.keys
  end

  include T
end

module Normal (F : Fld.S) = struct
  type ('var, 'cmp, 'ord) t = (('var, 'cmp) Mono.t, F.t, 'ord) Map.t

  (** A polynomial is a map from monomials to field coefficients. The constant
      term is indexed by the empty monomial *)

  module Term = struct
    type ('var, 'cmp) t = ('var, 'cmp) Mono.t * F.t
    (** A term is a monomial and a coefficient *)

    let pp pp_var : ('var, 'cmp) t Fmt.t =
      let open Fmt in
      fun ppf (m, c) -> pf ppf "%a %a" F.pp c (Mono.pp pp_var) m

    let div (t1 : ('var, 'cmp) t) (t2 : ('var, 'cmp) t) : ('var, 'cmp) t option
        =
      let m1, c1 = t1 in
      let m2, c2 = t2 in
      match Mono.div m1 m2 with None -> None | Some m -> Some (m, F.(c1 / c2))

    let deg (t : ('var, 'cmp) t) ~(of_ : 'var) = Mono.deg (fst t) ~of_
    let total_deg (t : ('var, 'cmp) t) = Mono.total_deg (fst t)
    let invariant (t : ('var, 'cmp) t) = not F.(snd t = zero)
  end

  let terms (p : ('var, 'cmp, 'ord) t) : ('var, 'cmp) Term.t list =
    Map.to_alist p

  let pp pp_var : ('var, 'cmp, 'ord) t Fmt.t =
    let open Fmt in
    using terms (list ~sep:(any " + ") (Term.pp pp_var))

  let lift_term_fn f ~key ~data = f (key, data)

  let invariant (p : ('var, 'cmp, 'ord) t) =
    Map.for_alli p ~f:(lift_term_fn Term.invariant)

  let normalize (p : ('var, 'cmp, 'ord) t) =
    Map.filteri p ~f:(lift_term_fn Term.invariant)

  let of_terms ordering : ('var, 'cmp) Term.t list -> ('var, 'cmp, 'ord) t =
    (* BUGGY *)
    Fn.compose normalize (Map.of_alist_exn ordering)

  let zero = Map.empty

  let total_deg (p : ('var, 'cmp, 'ord) t) : int option =
    Map.keys p
    |> List.map ~f:Mono.total_deg
    |> List.max_elt ~compare:Int.compare

  let coeff (p : ('var, 'cmp, 'ord) t) ~(of_ : ('var, 'cmp) Mono.t) : F.t =
    Map.find p of_ |> Option.value ~default:F.zero

  let vars (comparator : ('var, 'cmp) Comparator.Module.t)
      (p : ('var, 'cmp, 'ord) t) =
    p
    |> Map.keys
    |> List.concat_map ~f:Mono.vars
    |> List.dedup_and_sort ~compare:(Comparator.of_module comparator).compare

  let add (p1 : ('var, 'cmp, 'ord) t) (p2 : ('var, 'cmp, 'ord) t) :
      ('var, 'cmp, 'ord) t =
    Map.merge p1 p2 ~f:(fun ~key:_ -> function
      | `Left x | `Right x -> Some x
      | `Both (x, y) -> if F.(x + y = zero) then None else Some F.(x + y))

  let mul ordering (p1 : ('var, 'cmp, 'ord) t) (p2 : ('var, 'cmp, 'ord) t) :
      ('var, 'cmp, 'ord) t =
    Map.fold p1 ~init:(zero ordering) ~f:(fun ~key:m1 ~data:c1 acc ->
        Map.fold p2 ~init:acc ~f:(fun ~key:m2 ~data:c2 acc ->
            let m = Mono.mul m1 m2 in
            (* c ≠ 0 since c1, c2 ≠ 0 *)
            let c = F.(c1 * c2) in
            Map.change acc m ~f:(function
              | None -> Some c
              | Some c' ->
                  let c'' = F.(c + c') in
                  if F.(c'' = zero) then None else Some c'')))

  let eval (v : 'var -> F.t) (p : ('var, 'cmp, 'ord) t) : F.t =
    Map.fold p ~init:F.zero ~f:(fun ~key:m ~data:c acc ->
        F.(acc + (c * Mono.eval ~one:F.one ~mul:F.mul ~pow:F.( ** ) v m)))
end

module Make (Var : VAR) (F : Fld.S) = struct
  (** Polynomial in expression form *)
  module Expr = struct
    type t = Const of F.t | Var of Var.t | Add of t * t | Mul of t * t

    let ( + ) e1 e2 = Add (e1, e2)
    let ( * ) e1 e2 = Mul (e1, e2)
    let zero = Const F.zero
    let one = Const F.one

    let rec pp ppf = function
      | Const c -> F.pp ppf c
      | Var v -> Var.pp ppf v
      | Add (e1, e2) -> Fmt.pf ppf "(%a + %a)" pp e1 pp e2
      | Mul (e1, e2) -> Fmt.pf ppf "(%a * %a)" pp e1 pp e2

    let rec to_coeff = function
      | Const c -> Normal.of_terms [ (Mono.one, c) ]
      | Var v -> Normal.of_terms [ (Mono.of_vars [ (v, 1) ], F.one) ]
      | Add (e1, e2) -> Normal.add (to_coeff e1) (to_coeff e2)
      | Mul (e1, e2) -> Normal.mul (to_coeff e1) (to_coeff e2)

    let rec pow e n =
      if n = 0 then one else if n = 1 then e else e * pow e (n - 1)

    let of_mono (m : Mono.t) : t =
      let of_var_exp (var, exp) =
        List.init exp ~f:(Fn.const (Var var)) |> List.reduce_exn ~f:( * )
      in
      m
      |> Map.to_alist
      |> List.map ~f:of_var_exp
      |> List.reduce ~f:( * )
      |> Option.value ~default:zero

    let of_term (m, c) : t = Mul (Const c, of_mono m)

    let rec simplify = function
      | Const c -> Const c
      | Var v -> Var v
      | Add (e1, e2) -> (
          match (simplify e1, simplify e2) with
          | Const c1, Const c2 -> Const F.(c1 + c2)
          | (Const c, e | e, Const c) when F.(c = zero) -> e
          | e1', e2' -> Add (e1', e2'))
      | Mul (e1, e2) -> (
          match (simplify e1, simplify e2) with
          | Const c1, Const c2 -> Const F.(c1 * c2)
          | (Const c, e | e, Const c) when F.(c = one) -> e
          | (Const c, _ | _, Const c) when F.(c = zero) -> Const F.zero
          | e1', e2' -> Mul (e1', e2'))

    let of_coeff (p : Normal.t) : t =
      p
      |> Normal.terms
      |> List.map ~f:(fun (m, c) -> Mul (Const c, of_mono m))
      |> List.reduce ~f:(fun acc e -> Add (acc, e))
      |> Option.value ~default:(Const F.zero)
      |> simplify

    let extreme_data dir ~measure =
      Map.fold ~init:None ~f:(fun ~key ~data -> function
        | None -> Some (key, data)
        | Some (key', data') ->
            if dir (measure data) (measure data') then Some (key, data)
            else Some (key', data'))

    let max_data = extreme_data ( > )
    let min_data = extreme_data ( < )

    let best_var _ (p : Normal.t) : Var.t option =
      let vars = Normal.vars p in
      (* (fun o ->
           Fmt.(
             pr "best_var %a = %a\n%!" Normal.pp p
               (option ~none:(any "none") Var.pp)
               o);
           o)
         @@ *)
      (* mapping x -> mono -> deg of x in mono * coeff *)
      let degs =
        List.fold vars
          ~init:(Map.empty (module Var))
          ~f:(fun m x ->
            Map.add_exn m ~key:x
              ~data:
                (Map.mapi p ~f:(fun ~key:m ~data:c -> (Mono.deg m ~of_:x, c))))
      in
      max_data degs ~measure:(fun m ->
          let m = Map.filter m ~f:(fun (d, _) -> d > 0) in
          let _, (d, _) =
            min_data m ~measure:(fun (d, _) -> d) |> Option.value_exn
          in
          Int.(d * Map.length m))
      |> Option.map ~f:(fun (x, _) -> x)

    let next_var (vars : Var.t list) (p : Normal.t) : Var.t option =
      List.find vars ~f:(fun x ->
          (* x divides some monomial *)
          Map.existsi p ~f:(fun ~key:m ~data:_ -> Mono.deg m ~of_:x > 0))

    let horner ?(heuristics = best_var) (p : Normal.t) : t =
      let vars = Normal.vars p in
      let rec aux (p : Normal.t) : t =
        match heuristics vars p with
        | None -> Const (Normal.coeff p ~of_:Mono.one)
        | Some x ->
            let d =
              p
              |> Map.keys
              |> List.filter_map ~f:(fun m ->
                     let d = Mono.deg m ~of_:x in
                     Option.some_if (d > 0) d)
              |> List.min_elt ~compare:Int.compare
              |> Option.value_exn
            in
            Logs.debug (fun m -> m "heuristic: %a" Mono.pp_var_exp (x, d));

            (* partition terms according to whether they are divisible by x *)
            let divs, ndivs =
              List.partition_map (Normal.terms p) ~f:(fun (m, c) ->
                  match Mono.div m (Mono.of_vars [ (x, d) ]) with
                  | Some m' -> Either.First (m', c)
                  | None -> Second (m, c))
            in
            let p = pow (Var x) d in
            Logs.debug (fun m -> m "pow %a %d = %a" Var.pp x d pp p);
            Add
              (Mul (p, aux (Normal.of_terms divs)), aux (Normal.of_terms ndivs))
            |> simplify
      in
      aux p

    let normalize (e : t) : t = e |> to_coeff |> horner
  end
end

module Test () = struct
  module Var = struct
    include String

    let pp = Fmt.string
  end
  (* module F = struct
       module T = Ff.MakeFp (struct
         let prime_order = Z.of_int 101
       end)

       include T

       let of_int n = of_z Z.(of_int n)
       let sexp_of_t t = t |> to_string |> String.sexp_of_t
       let t_of_sexp s = s |> String.t_of_sexp |> of_string
       let pp = Fmt.using to_z Z.pp_print
     end *)

  module F = Fld.Q
  module P = Make (Var) (F)

  let () = Logs.set_level (Some Logs.Debug)
  let () = Logs.set_reporter (Logs_fmt.reporter ())

  open Logs

  let () =
    P.Mono.(
      let m1 = of_vars [ ("x", 3) ] in
      let m2 = of_vars [ ("x", 2) ] in
      let m = div m1 m2 |> Option.value_exn in
      debug (fun mm ->
          mm "%a / %a = %a \n%!" P.Mono.pp m1 P.Mono.pp m2 P.Mono.pp m))

  let () =
    let open P in
    let open Normal in
    (* x^3 y^2 z *)
    let m1 = Mono.of_vars [ ("x", 3); ("y", 2); ("z", 1) ] in
    (* y^3 z^3 *)
    let m2 = Mono.of_vars [ ("y", 3); ("z", 3) ] in
    (* x y z *)
    let m3 = Mono.of_vars [ ("x", 1); ("y", 1); ("z", 1) ] in
    (* y^2 *)
    let m4 = Mono.of_vars [ ("y", 2) ] in
    (* 2 m1 + 3/2 m2 - 3 m3 + 1 m4 *)
    let p =
      of_terms
        [
          (m1, F.of_int 2);
          (m2, F.(of_int 3 / of_int 2));
          (m3, F.of_int (-3));
          (m4, F.one);
        ]
    in

    debug (fun mm -> mm "p = %a\n%!" pp p);
    debug (fun mm -> mm "p * p = %a\n%!" pp (mul p p));
    debug (fun mm -> mm "horner (best) : %a\n%!" Expr.pp (Expr.horner p));
    debug (fun mm ->
        mm "horner (next) : %a\n%!" Expr.pp
          (Expr.horner ~heuristics:Expr.next_var p))

  let () =
    (* x ^ 2 *)
    let p = P.Expr.(Var "x" * Var "x") in
    debug (fun mm -> mm "p = %a\n%!" P.Expr.pp p);
    debug (fun mm -> mm "normalize p = %a\n%!" P.Expr.pp (P.Expr.normalize p))

  (*
     let () =
       let open P in
       (* p1 = (2x-1) p2 = (5x - 6) *)
       let p1 =
         of_terms
           [ (Mono.of_vars [ ("x", 1) ], F.of_int 2); (Mono.one, F.of_int (-1)) ]
       in
       let p2 =
         of_terms
           [ (Mono.of_vars [ ("x", 1) ], F.of_int 5); (Mono.one, F.of_int (-6)) ]
       in
       debug (fun mm -> mm "%a * %a = %a\n%!" pp p1 pp p2 pp (mul p1 p2)

     let () =
       (* (2x^2-1)(-x^2-6) *)
       let open P in
       let p1 =
         P.of_terms
           [ (Mono.of_vars [ ("x", 2) ], F.of_int 2); (Mono.one, F.of_int (-1)) ]
       in
       let p2 =
         P.of_terms
           [
             (Mono.of_vars [ ("x", 2) ], F.of_int (-1)); (Mono.one, F.of_int (-6));
           ]
       in
       debug (fun mm -> mm "%a * %a = %a\n%!" P.pp p1 P.pp p2 P.pp (P.mul p1 p2) *)
end

let map (type t1 t2) (module V1 : VAR with type t = t1)
    (module V2 : VAR with type t = t2) (module F : Fld.S) (f : t1 -> t2)
    (p : Make(V1)(F).Normal.t) : Make(V2)(F).Normal.t =
  ()
